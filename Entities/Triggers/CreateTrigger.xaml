<Activity mc:Ignorable="sap sap2010" x:Class="CreateTrigger" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_OpenedWorkbook" Type="InArgument(ui:WorkbookApplication)" />
    <x:Property Name="in_Config" Type="InArgument(scg:Dictionary(x:String, ui:GenericValue))" />
    <x:Property Name="in_OUFolderName" Type="InArgument(x:String)" />
    <x:Property Name="in_OUFoldersData" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_TriggerIndex" Type="InArgument(x:Int32)" />
    <x:Property Name="io_TriggersData" Type="InOutArgument(sd:DataTable)" />
    <x:Property Name="in_QueuesData" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_CalendarsData" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_InputArgumentsDefinition" Type="InArgument(x:String)" />
    <x:Property Name="in_Enabled" Type="InArgument(x:String)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="in_UseCalendar" Type="InArgument(x:String)" />
    <x:Property Name="in_StartProcessCronDetails" Type="InArgument(x:String)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="in_StartProcessCron" Type="InArgument(x:String)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="in_StopStrategy" Type="InArgument(x:String)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="in_StartStrategy" Type="InArgument(x:String)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="in_StopProcessDate" Type="InArgument(x:String)" />
    <x:Property Name="in_JobPriority" Type="InArgument(x:String)" />
    <x:Property Name="in_ItemsActivationThreshold" Type="InArgument(x:String)" />
    <x:Property Name="in_ItemsPerJobActivationTarget" Type="InArgument(x:String)" />
    <x:Property Name="in_MaxJobsForActivation" Type="InArgument(x:String)" />
    <x:Property Name="in_RuntimeType" Type="InArgument(x:String)" />
    <x:Property Name="in_TimezoneID" Type="InArgument(x:String)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="in_StopProcessExpression" Type="InArgument(x:String)" />
    <x:Property Name="in_TriggerName" Type="InArgument(x:String)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="in_CalendarName" Type="InArgument(x:String)" />
    <x:Property Name="in_ProcessName" Type="InArgument(x:String)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="in_QueueName" Type="InArgument(x:String)" />
    <x:Property Name="in_ProcessesData" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_ColumnNames" Type="InArgument(s:String[])" />
    <x:Property Name="in_TriggerDetails" Type="InArgument(sd:DataRow)" />
  </x:Members>
  <this:CreateTrigger.in_OpenedWorkbook>
    <InArgument x:TypeArguments="ui:WorkbookApplication" />
  </this:CreateTrigger.in_OpenedWorkbook>
  <this:CreateTrigger.in_TriggerIndex>
    <InArgument x:TypeArguments="x:Int32" />
  </this:CreateTrigger.in_TriggerIndex>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1854.66666666667,1209.33333333333</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="42">
      <x:String>Newtonsoft.Json</x:String>
      <x:String>Newtonsoft.Json.Converters</x:String>
      <x:String>Newtonsoft.Json.Linq</x:String>
      <x:String>Newtonsoft.Json.Serialization</x:String>
      <x:String>System</x:String>
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="38">
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Plugin.Workflow</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <sap:WorkflowViewStateService.ViewState>
    <scg:Dictionary x:TypeArguments="x:String, x:Object">
      <x:Boolean x:Key="ShouldExpandAll">False</x:Boolean>
      <x:Boolean x:Key="ShouldCollapseAll">False</x:Boolean>
    </scg:Dictionary>
  </sap:WorkflowViewStateService.ViewState>
  <Sequence sap2010:Annotation.AnnotationText="Create Trigger with the specified data.&#xA;IDs of successfully created Triggers are added to the Triggers configuration file (Triggers.xlsx)." DisplayName="Create Trigger" sap:VirtualizedContainerService.HintSize="480.666666666667,1044.66666666667" sap2010:WorkflowViewState.IdRef="Sequence_14">
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="438.666666666667,890.666666666667" sap2010:WorkflowViewState.IdRef="TryCatch_1">
      <TryCatch.Variables>
        <Variable x:TypeArguments="x:String" Default="[in_Config(&quot;OperationDefaultResult&quot;)]" Name="OperationResult" />
      </TryCatch.Variables>
      <TryCatch.Try>
        <Sequence DisplayName="Try to Create Trigger" sap:VirtualizedContainerService.HintSize="390,652.666666666667" sap2010:WorkflowViewState.IdRef="Sequence_18">
          <Sequence.Variables>
            <Variable x:TypeArguments="x:Int64" Name="OUFolderID" />
            <Variable x:TypeArguments="x:Int64" Name="TriggerID" />
            <Variable x:TypeArguments="x:Int64" Name="CalendarID" />
            <Variable x:TypeArguments="x:Int64" Name="ProcessID" />
            <Variable x:TypeArguments="x:Int64" Name="QueueID" />
            <Variable x:TypeArguments="x:Int32" Name="StartStrategy" />
            <Variable x:TypeArguments="x:Int64" Name="ItemsActivationThreshold" />
            <Variable x:TypeArguments="x:Int64" Name="ItemsPerJobActivationTarget" />
            <Variable x:TypeArguments="x:Int32" Name="MaxJobsForActivation" />
          </Sequence.Variables>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Sequence DisplayName="Prepare Request Data" sap:VirtualizedContainerService.HintSize="348,69.3333333333333" sap2010:WorkflowViewState.IdRef="Sequence_24">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Sequence DisplayName="Get OU/Folder ID" sap:VirtualizedContainerService.HintSize="200,69.3333333333333" sap2010:WorkflowViewState.IdRef="Sequence_25">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If Condition="[String.IsNullOrWhiteSpace(in_OUFolderName)]" DisplayName="If OU/Folder Name Is Not Specified" sap:VirtualizedContainerService.HintSize="508,214" sap2010:WorkflowViewState.IdRef="If_10">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <If.Then>
                  <Throw DisplayName="Throw (OU/Folder Name Not Specified)" Exception="[New ArgumentException(in_Config(&quot;OUFolderNameNotSpecified&quot;))]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_5" />
                </If.Then>
              </If>
              <If Condition="[in_OUFoldersData.Rows.Find({in_OUFolderName}) Is Nothing]" DisplayName="If No OU/Folder Found with Specified Name" sap:VirtualizedContainerService.HintSize="508,216" sap2010:WorkflowViewState.IdRef="If_11">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <If.Then>
                  <Throw DisplayName="Throw (OU/Folder Not Found)" Exception="[New Exception(in_Config(&quot;OUFolderNotFound&quot;))]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_6" />
                </If.Then>
                <If.Else>
                  <Assign DisplayName="Assign OU/Folder ID" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_6">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int64">[OUFolderID]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int64">[Convert.ToInt64(in_OUFoldersData.Rows.Find(in_OUFolderName)("ID"))]</InArgument>
                    </Assign.Value>
                  </Assign>
                </If.Else>
              </If>
            </Sequence>
            <Sequence DisplayName="Get Process ID" sap:VirtualizedContainerService.HintSize="200,69.3333333333333" sap2010:WorkflowViewState.IdRef="Sequence_29">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If Condition="[String.IsNullOrWhiteSpace(in_ProcessName)]" DisplayName="If Process Name Is Not Specified" sap:VirtualizedContainerService.HintSize="508,214" sap2010:WorkflowViewState.IdRef="If_17">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <If.Then>
                  <Throw DisplayName="Throw (Process Name Not Specified)" Exception="[New ArgumentException(in_Config(&quot;ProcessNameNotSpecified&quot;))]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_12" />
                </If.Then>
              </If>
              <If Condition="[in_ProcessesData.Rows.Find({OUFolderID, in_ProcessName}) Is Nothing]" DisplayName="If No Process Found with Specified Name" sap:VirtualizedContainerService.HintSize="508,216" sap2010:WorkflowViewState.IdRef="If_18">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <If.Then>
                  <Throw DisplayName="Throw (Process Not Found)" Exception="[New Exception(in_Config(&quot;ProcessNotFound&quot;))]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_13" />
                </If.Then>
                <If.Else>
                  <Assign DisplayName="Assign ProcessID" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_12">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int64">[ProcessID]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int64">[Convert.ToInt64(in_ProcessesData.Rows.Find({OUFolderID, in_ProcessName})("ProcessID"))]</InArgument>
                    </Assign.Value>
                  </Assign>
                </If.Else>
              </If>
            </Sequence>
            <If sap2010:Annotation.AnnotationText="Get Calendar ID" Condition="[Not String.IsNullOrWhiteSpace(in_CalendarName)]" DisplayName="If Calendar Name Is Specified" sap:VirtualizedContainerService.HintSize="200,83.3333333333333" sap2010:WorkflowViewState.IdRef="If_13">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <If Condition="[in_CalendarsData.Rows.Find({in_CalendarName}) Is Nothing]" DisplayName="If No Calendar Found with Specified Name" sap:VirtualizedContainerService.HintSize="508,216" sap2010:WorkflowViewState.IdRef="If_14">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <If.Then>
                    <Throw DisplayName="Throw (Calendar Not Found)" Exception="[New Exception(in_Config(&quot;CalendarNotFound&quot;))]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_9" />
                  </If.Then>
                  <If.Else>
                    <Assign DisplayName="Assign CalendarID" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_10">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Int64">[CalendarID]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Int64">[Convert.ToInt64(in_CalendarsData.Rows.Find(in_CalendarName)("ID"))]</InArgument>
                      </Assign.Value>
                    </Assign>
                  </If.Else>
                </If>
              </If.Then>
            </If>
            <If sap2010:Annotation.AnnotationText="Get Queue ID" Condition="[Not String.IsNullOrWhiteSpace(in_QueueName)]" DisplayName="If Queue Name Is Specified" sap:VirtualizedContainerService.HintSize="200,83.3333333333333" sap2010:WorkflowViewState.IdRef="If_20">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <If Condition="[in_QueuesData.Rows.Find({OUFolderID, in_QueueName}) Is Nothing]" DisplayName="If No Queue Found with Specified Name" sap:VirtualizedContainerService.HintSize="508,216" sap2010:WorkflowViewState.IdRef="If_19">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <If.Then>
                    <Throw DisplayName="Throw (Queue Not Found)" Exception="[New Exception(in_Config(&quot;QueueNotFound&quot;))]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_14" />
                  </If.Then>
                  <If.Else>
                    <Assign DisplayName="Assign QueueID" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_13">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Int64">[QueueID]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Int64">[Convert.ToInt64(in_QueuesData.Rows.Find({OUFolderID, in_QueueName})("QueueID"))]</InArgument>
                      </Assign.Value>
                    </Assign>
                  </If.Else>
                </If>
              </If.Then>
            </If>
            <If Condition="[io_TriggersData.Rows.Find({OUFolderID, in_TriggerName}) IsNot Nothing]" DisplayName="If Trigger Name Is Already Used" sap:VirtualizedContainerService.HintSize="200,52.6666666666667" sap2010:WorkflowViewState.IdRef="If_12">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <Throw DisplayName="Throw (Trigger Name Already Used)" Exception="[New ArgumentException(String.Format(in_Config(&quot;TriggerNameAlreadyUsed&quot;), in_TriggerName))]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_7" />
              </If.Then>
            </If>
            <Sequence DisplayName="Get Start Strategy" sap:VirtualizedContainerService.HintSize="200,69.3333333333333" sap2010:WorkflowViewState.IdRef="Sequence_30">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If Condition="[String.IsNullOrWhiteSpace(in_StartStrategy)]" DisplayName="If StartStrategy Is Specified" sap:VirtualizedContainerService.HintSize="484,214" sap2010:WorkflowViewState.IdRef="If_21">
                <If.Then>
                  <Throw DisplayName="Throw (StartStrategy Not Specified)" Exception="[New ArgumentException(in_Config(&quot;StartStrategyNotSpecified&quot;))]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_15" />
                </If.Then>
              </If>
              <If Condition="[Int32.TryParse(in_StartStrategy, Nothing)]" DisplayName="If StartStrategy Is Valid" sap:VirtualizedContainerService.HintSize="484,216" sap2010:WorkflowViewState.IdRef="If_22">
                <If.Then>
                  <Assign DisplayName="Assign StartStrategy" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_14">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[StartStrategy]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">[Convert.ToInt32(in_StartStrategy)]</InArgument>
                    </Assign.Value>
                  </Assign>
                </If.Then>
              </If>
            </Sequence>
            <If Condition="[Not String.IsNullOrWhiteSpace(in_ItemsActivationThreshold) AndAlso Int32.TryParse(in_ItemsActivationThreshold, Nothing)]" DisplayName="If ItemsActivationThreshold Is Specified And Valid" sap:VirtualizedContainerService.HintSize="200,52.6666666666667" sap2010:WorkflowViewState.IdRef="If_24">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <Assign DisplayName="Assign ItemsActivationThreshold" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_16">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int64">[ItemsActivationThreshold]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int64">[Convert.ToInt32(in_ItemsActivationThreshold)]</InArgument>
                  </Assign.Value>
                </Assign>
              </If.Then>
            </If>
            <If Condition="[Not String.IsNullOrWhiteSpace(in_ItemsPerJobActivationTarget) AndAlso Int32.TryParse(in_ItemsPerJobActivationTarget, Nothing)]" DisplayName="If ItemsPerJobActivationTarget Is Specified And Valid" sap:VirtualizedContainerService.HintSize="200,52.6666666666667" sap2010:WorkflowViewState.IdRef="If_25">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <Assign DisplayName="Assign ItemsPerJobActivationTarget" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_17">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int64">[ItemsPerJobActivationTarget]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int64">[Convert.ToInt32(in_ItemsPerJobActivationTarget)]</InArgument>
                  </Assign.Value>
                </Assign>
              </If.Then>
            </If>
            <If Condition="[Not String.IsNullOrWhiteSpace(in_MaxJobsForActivation) AndAlso Int32.TryParse(in_MaxJobsForActivation, Nothing)]" DisplayName="If MaxJobsForActivation Is Specified And Valid" sap:VirtualizedContainerService.HintSize="200,52.6666666666667" sap2010:WorkflowViewState.IdRef="If_26">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <Assign DisplayName="Assign MaxJobsForActivation" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_18">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[MaxJobsForActivation]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">[Convert.ToInt32(in_MaxJobsForActivation)]</InArgument>
                  </Assign.Value>
                </Assign>
              </If.Then>
            </If>
          </Sequence>
          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke CreateTriggerRequest Workflow" sap:VirtualizedContainerService.HintSize="348,86.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_6" UnSafe="False" WorkflowFileName="Entities\Triggers\CreateTriggerRequest.xaml">
            <ui:InvokeWorkflowFile.Arguments>
              <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_Name">[in_TriggerName]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_InputArgumentsDefinition">[in_InputArgumentsDefinition]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_Enabled">[in_Enabled]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_UseCalendar">[in_UseCalendar]</InArgument>
              <InArgument x:TypeArguments="x:Int64" x:Key="in_CalendarID">[CalendarID]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_StartProcessCronDetails">[in_StartProcessCronDetails]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_StartProcessCron">[in_StartProcessCron]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_StopStrategy">[in_StopStrategy]</InArgument>
              <InArgument x:TypeArguments="x:Int32" x:Key="in_StartStrategy">[StartStrategy]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_StopProcessDate">[in_StopProcessDate]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_JobPriority">[in_JobPriority]</InArgument>
              <InArgument x:TypeArguments="x:Int64" x:Key="in_ItemsActivationThreshold">[ItemsActivationThreshold]</InArgument>
              <InArgument x:TypeArguments="x:Int64" x:Key="in_ItemsPerJobActivationTarget">[ItemsPerJobActivationTarget]</InArgument>
              <InArgument x:TypeArguments="x:Int32" x:Key="in_MaxJobsForActivation">[MaxJobsForActivation]</InArgument>
              <OutArgument x:TypeArguments="x:Int64" x:Key="out_TriggerID">[TriggerID]</OutArgument>
              <InArgument x:TypeArguments="x:Int64" x:Key="in_OUFolderID">[OUFolderID]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_RuntimeType">[in_RuntimeType]</InArgument>
              <InArgument x:TypeArguments="x:Int64" x:Key="in_ProcessID">[ProcessID]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_TimezoneID">[in_TimezoneID]</InArgument>
              <InArgument x:TypeArguments="x:Int64" x:Key="in_QueueID">[QueueID]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_StopProcessExpression">[in_StopProcessExpression]</InArgument>
              <InArgument x:TypeArguments="sd:DataRow" x:Key="in_TriggerDetails">[in_TriggerDetails]</InArgument>
            </ui:InvokeWorkflowFile.Arguments>
          </ui:InvokeWorkflowFile>
          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Write Cell (Trigger ID)" sap:VirtualizedContainerService.HintSize="348,86.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_7" UnSafe="False" WorkflowFileName="Common\WriteCellByColumnNameAndIndex.xaml">
            <ui:InvokeWorkflowFile.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="in_SheetName">[in_Config("CreateOperationName")]</InArgument>
              <InArgument x:TypeArguments="x:Int64" x:Key="in_Index">[in_TriggerIndex]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_ColumnName">TriggerID</InArgument>
              <InArgument x:TypeArguments="s:String[]" x:Key="in_ColumnNames">[in_ColumnNames]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_Value">[TriggerID.ToString]</InArgument>
              <InArgument x:TypeArguments="ui:WorkbookApplication" x:Key="in_OpenedWorkbook">[in_OpenedWorkbook]</InArgument>
            </ui:InvokeWorkflowFile.Arguments>
          </ui:InvokeWorkflowFile>
          <Sequence sap2010:Annotation.AnnotationText="Update cached data with created entity for duplicated checks in subsequent requests.&#xA;It is sufficient to update only the fields used during the &quot;Prepare Request Data&quot; step." DisplayName="Update Cached Data" sap:VirtualizedContainerService.HintSize="348,198" sap2010:WorkflowViewState.IdRef="Sequence_26">
            <Sequence.Variables>
              <Variable x:TypeArguments="sd:DataRow" Name="NewTriggerRow" />
            </Sequence.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Assign DisplayName="Assign NewTriggerRow (Initialization)" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_7">
              <Assign.To>
                <OutArgument x:TypeArguments="sd:DataRow">[NewTriggerRow]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="sd:DataRow">[io_TriggersData.NewRow()]</InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Assign Cached OU/Folder ID" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_8">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Object">[NewTriggerRow("OUFolderID")]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Object">[OUFolderID]</InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Assign Cached Trigger Name" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_9">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Object">[NewTriggerRow("TriggerName")]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[in_TriggerName]</InArgument>
              </Assign.Value>
            </Assign>
            <ui:AddDataRow ArrayRow="{x:Null}" DataRow="[NewTriggerRow]" DataTable="[io_TriggersData]" DisplayName="Add Data Row (New Trigger)" sap:VirtualizedContainerService.HintSize="262,22" sap2010:WorkflowViewState.IdRef="AddDataRow_1" />
          </Sequence>
        </Sequence>
      </TryCatch.Try>
      <TryCatch.Catches>
        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404.666666666667,22" sap2010:WorkflowViewState.IdRef="Catch`1_1">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ActivityAction x:TypeArguments="s:Exception">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="s:Exception" Name="Exception" />
            </ActivityAction.Argument>
            <Sequence DisplayName="Failed to Create Trigger" sap:VirtualizedContainerService.HintSize="376,288.666666666667" sap2010:WorkflowViewState.IdRef="Sequence_20">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,94.6666666666667" sap2010:WorkflowViewState.IdRef="LogMessage_9" Level="Error" Message="[Exception.Message]">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:LogMessage>
              <Assign DisplayName="Assign (OperationResult)" sap:VirtualizedContainerService.HintSize="334,62" sap2010:WorkflowViewState.IdRef="Assign_2">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[OperationResult]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[Exception.Message]</InArgument>
                </Assign.Value>
              </Assign>
            </Sequence>
          </ActivityAction>
        </Catch>
      </TryCatch.Catches>
      <TryCatch.Finally>
        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Write Cell (Result)" sap:VirtualizedContainerService.HintSize="348,86.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_8" UnSafe="False" WorkflowFileName="Common\WriteCellByColumnNameAndIndex.xaml">
          <ui:InvokeWorkflowFile.Arguments>
            <InArgument x:TypeArguments="x:String" x:Key="in_SheetName">[in_Config("CreateOperationName")]</InArgument>
            <InArgument x:TypeArguments="x:Int64" x:Key="in_Index">[in_TriggerIndex]</InArgument>
            <InArgument x:TypeArguments="x:String" x:Key="in_ColumnName">Result</InArgument>
            <InArgument x:TypeArguments="s:String[]" x:Key="in_ColumnNames">[in_ColumnNames]</InArgument>
            <InArgument x:TypeArguments="x:String" x:Key="in_Value">[OperationResult]</InArgument>
            <InArgument x:TypeArguments="ui:WorkbookApplication" x:Key="in_OpenedWorkbook">[in_OpenedWorkbook]</InArgument>
          </ui:InvokeWorkflowFile.Arguments>
        </ui:InvokeWorkflowFile>
      </TryCatch.Finally>
    </TryCatch>
  </Sequence>
</Activity>